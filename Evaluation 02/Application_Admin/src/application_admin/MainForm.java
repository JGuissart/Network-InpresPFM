/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_admin;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Julien
 */
public class MainForm extends javax.swing.JFrame
{
    private Socket CSocket;
    private Properties PropertiesFileAdmin;
    private DataInputStream dis;
    private DataOutputStream dos;

    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        initComponents();
        LoadPropertiesFile();
    }
    
    private void LoadPropertiesFile()
    {
        File f = new File("Applic_Admin.properties");
        if(!f.exists())
        {
            OutputStream os = null;
            try
            {
                os = new FileOutputStream(f);
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Properties propToCreate = new Properties();
            propToCreate.put("PORT_ADMIN", "31011");
            propToCreate.put("ADRESSE_IP_SERVEUR", "192.168.1.100");
            
            try
            {
                propToCreate.store(os, "Applic_Admin");
                os.flush();
            }
            catch (IOException ex)
            {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try
        {
            InputStream is = new FileInputStream(f);
            PropertiesFileAdmin = new Properties();
            PropertiesFileAdmin.load(is);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void ConnexionServeur()
    {
        try 
        {
            CSocket = new Socket(PropertiesFileAdmin.getProperty("ADRESSE_IP_SERVEUR"), Integer.parseInt(PropertiesFileAdmin.getProperty("PORT_ADMIN")));
            dis = new DataInputStream(CSocket.getInputStream());
            dos = new DataOutputStream(CSocket.getOutputStream());
            System.out.println("Connexion avec le serveur reussie ! ");
        } 
        catch (IOException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        btnQuitter = new javax.swing.JButton();
        lblListerClients = new javax.swing.JLabel();
        btnLister = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListeClients = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        lblServeurPause = new javax.swing.JLabel();
        btnPause = new javax.swing.JButton();
        lblReponseServeurPause = new javax.swing.JLabel();
        tfdReponsePause = new javax.swing.JTextField();
        lblStopperServeur = new javax.swing.JLabel();
        lblReponseStop = new javax.swing.JLabel();
        tfdReponseStop = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        cbxNombreSecondes = new javax.swing.JComboBox();
        btnStop = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnConnexion = new javax.swing.JMenu();
        miSeConnecter = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnQuitter.setText("Quitter");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterActionPerformed(evt);
            }
        });

        lblListerClients.setText("Lister les clients");

        btnLister.setText("Lister");
        btnLister.setEnabled(false);
        btnLister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListerActionPerformed(evt);
            }
        });

        tblListeClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "IP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblListeClients);

        lblServeurPause.setText("Mettre le serveur en pause");

        btnPause.setText("Pause");
        btnPause.setEnabled(false);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        lblReponseServeurPause.setText("Réponse du serveur : ");

        lblStopperServeur.setText("Stopper le serveur");

        lblReponseStop.setText("Réponse du serveur : ");

        cbxNombreSecondes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        cbxNombreSecondes.setEnabled(false);

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        mnConnexion.setText("Connexion");

        miSeConnecter.setText("Se connecter");
        miSeConnecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSeConnecterActionPerformed(evt);
            }
        });
        mnConnexion.add(miSeConnecter);

        jMenuBar1.add(mnConnexion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblListerClients)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnLister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(lblServeurPause)
                    .addComponent(btnPause, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblReponseServeurPause)
                    .addComponent(tfdReponsePause)
                    .addComponent(jSeparator2)
                    .addComponent(lblStopperServeur)
                    .addComponent(lblReponseStop)
                    .addComponent(tfdReponseStop)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbxNombreSecondes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnQuitter, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListerClients)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLister)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblServeurPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblReponseServeurPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfdReponsePause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStopperServeur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStop)
                    .addComponent(cbxNombreSecondes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblReponseStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfdReponseStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnQuitter)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListerActionPerformed
        StringBuilder sbRequete = new StringBuilder("LISTER");
        DefaultTableModel dtm = (DefaultTableModel)tblListeClients.getModel();

        SendData(sbRequete);
        String strReponse = ReceiveData();
        StringTokenizer stReponse = new StringTokenizer(strReponse, "#");
        int i = 0;
        while(stReponse.hasMoreElements())
        {
            dtm.setValueAt((String)stReponse.nextElement(), i, 0);
            i++;
        }
    }//GEN-LAST:event_btnListerActionPerformed

    private void btnQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterActionPerformed
        StringBuilder sbRequete = new StringBuilder("ENDOFCONNEXION");

        SendData(sbRequete);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnQuitterActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        StringBuilder sbRequete = new StringBuilder("PAUSE");

        SendData(sbRequete);
        String strReponse = ReceiveData();
        tfdReponsePause.setText(strReponse);
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        StringBuilder sbAction = new StringBuilder("STOP");
        StringBuilder sbNombreSecondes = new StringBuilder(cbxNombreSecondes.getSelectedItem().toString());

        SendData(sbAction);
        try
        {
            Thread.sleep(1000);
        }
        catch (InterruptedException ex)
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        SendData(sbNombreSecondes);
        String strReponse = ReceiveData();
        tfdReponseStop.setText(strReponse);
    }//GEN-LAST:event_btnStopActionPerformed

    private void miSeConnecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSeConnecterActionPerformed
        ConnectionForm CF = new ConnectionForm(this, true);
        CF.setVisible(true);
        String strLogin = CF.getLogin();
        String strPassword = CF.getPassword();
        
        StringBuilder sbRequete = new StringBuilder(strLogin + "#" + strPassword);
        SendData(sbRequete);
        
        String strReponse = ReceiveData();
        
        if(strReponse.equals("OK"))
        {
            ConnexionServeur();
            btnLister.setEnabled(true);
            btnPause.setEnabled(true);
            btnStop.setEnabled(true);
            cbxNombreSecondes.setEnabled(true);
        }
        else
            System.err.println("Erreur lors de la connexion !");
    }//GEN-LAST:event_miSeConnecterActionPerformed

    public void SendData(StringBuilder message)
    {
        try 
        {
            System.out.println("Message à envoyer = " + message.toString());
            dos.write(message.toString().getBytes());
            dos.flush();
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String ReceiveData()
    {
        byte b;
        StringBuilder message = new StringBuilder("");
        
        try 
        {
            while((b = dis.readByte()) != (byte)'\n')
            {
                System.out.println("byte = " + (char)b);
                message.append((char)b);
            }
            System.out.println("Message reçu = " + message.toString().trim());
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return message.toString().trim(); //trim pour enlever tous les char de fin de chaine
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLister;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JButton btnStop;
    private javax.swing.JComboBox cbxNombreSecondes;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblListerClients;
    private javax.swing.JLabel lblReponseServeurPause;
    private javax.swing.JLabel lblReponseStop;
    private javax.swing.JLabel lblServeurPause;
    private javax.swing.JLabel lblStopperServeur;
    private javax.swing.JMenuItem miSeConnecter;
    private javax.swing.JMenu mnConnexion;
    private javax.swing.JTable tblListeClients;
    private javax.swing.JTextField tfdReponsePause;
    private javax.swing.JTextField tfdReponseStop;
    // End of variables declaration//GEN-END:variables
}
